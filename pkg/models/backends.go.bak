package models

import (
	u "github.com/araddon/gou"
	"strings"
	"sync"
)

var (
	_ = u.EMPTY

	backendMu    sync.Mutex
	backendFuncs = make(map[string]BackendConnCreator)
)

// A backend connection
type BackendConn interface {
	// Initial setup/configuration and validaton
	Init() error
	Close() error
	// BackendConn also implments Handler interface which
}

type BackendConnCreator func(*BackendConfig) BackendConn

func BackendConnRegister(name string, fn BackendConnCreator) {
	backendMu.Lock()
	defer backendMu.Unlock()
	backendFuncs[strings.ToLower(name)] = fn
}

func BackendConnCreatorGet(backendType string) BackendConnCreator {
	return backendFuncs[strings.ToLower(backendType)]
}

// Backend is resource descriptor of a backend
// along with a connection creator
type Backend struct {
	mu          sync.Mutex
	ConnCreator BackendConnCreator
	Conf        *BackendConfig
}

func NewBackend(conf *BackendConfig, connCreator BackendConnCreator) *Backend {
	return &Backend{ConnCreator: connCreator, Conf: conf}
}
